내용정리!

1/19 1일차!

Multi Processing은 일할 수 있는 코어가 2개 이상일 때 의미가 있다!?
여러 코어가 각각 다른 작업을 시간적으로 동시에 할 수 있는 상황에서 이뤄지는 것.

Multi Tasking은 하나의 코어가 Time-Slicing 개념을 이용해서 여러 작업을 분할처리하여 동시에 
이뤄지는 것처럼 보이게 처리하는 것.

Multi Threading은 프로그램 단위로 볼 때, 한 프로그램(프로세스) 안에 몇 개의 실행흐름이 있는가에 주목.

Thread 프로그래밍이 어려운 이유는 동기화 때문...

Thread가 너무 많아지면 리소스를 많이 먹어서 오히려 성능이 저하함.
tradeoff가 있기 때문에, 작업마다 몇 개의 스레드가 최적인지 파악해야 함.


스레드 구현은 두 가지 방법이 있다. 
Thread class 상속, Runnable interface 구현.
Runnable interface 구현이 더 좋다!!!
클래스 상속 제약으로 인해 재사용 가능성이 덜어진다!(Thread class 상속 시..)


thread.start() 호출하면, 해당 스레드가 Runnable 상태가 된다!
Thread scheduler는 runnable한 스레드 중 하나를 골라 CPU에서 실행시킨다(run()메소드 호출!!)
스레드의 run함수가 호출 종료되면 Dead 상태가 된다. Dead 상태의 스레드를 살리는 방법은 없음.


thread의 종료

main thread가 있고 Mythread라고 불리는 thread가 있는데
main thread에서 MyThread의 run 종료 전에 mythread를 종료시키려면 어떻게 해야 하나요??

1. stop메소드 
-> 지금은 deprecated.(더 이상 사용되지 않고 사용하지 않아야 하는 메소드)
   deprecated 이유? stop메소드의 문제가 많아요!!
멈출 수는 있는데, 강제종료 방식.스레드가 돌고 있는데 그냥 강제종료시켜버림..

지금은 다른 방식을 사용함!
2. interrupt(), isinterrupted() 메소드를 이용해 인터럽트 걸렸는지 확인하고 제어하는 방식으로 종료가능.
    바로 종료되는 게 아니고, 인터럽트 확인 시 적당히 정리하고 종료하는 로직을 짜서 종료시켜야 함.


**특이한 형태의 Thread 알아보아요!!
결국은 프로그램이 종료되려면 프로세스 내에서 파생된 모든 스레드가 종료되어야 프로세스 종료 가능!!


메인 스레드가 죽으면 다른 스레드를 다 죽이고 싶은 경우??
(메인 스레드가 종료되었는데 남아있는 스레드들이 리소스를 계속 먹어서 안드로이드 운영체제 느려지는 현상
등을 예로 들 수 있음! ) -> Daemon Thread


메인 스레드에서 파생된 스레드들이 모두 종료될 때까지 메인이 종료되지 않도록 하고싶은 경우???
-> join() 메소드  활용.


***Thread 간의 실행순서를 우리가 프로그래밍하면서 직접 제어하기는 상당히 어려움!
join 메소드를 활용해서 스레드 간의 실행 순서를 조금은 제어할 수도 있음.


runnable thread 중에서 어떤 기준으로 스케줄러가 선택하여 실행시키는가???


스레드에서 sleep()함수 실행되고 나서 runnable 상태로 돌입.
runnable 상태에서 더 대기하다가 스케줄러에게 선택되면 다시 실행되는 것.

----------------------------------------------------------------------------
-Thread의 생성과 종료
-Thread의 제어(sleep, yield, daemon, setPriority,join)

질문))
근데 stop메소드가 스레드 강제 종료해서 안좋다고 했는데, 
데몬 스레드로 실행시키면, 메인 스레드 종료되었을 때 어떤 방식으로 남은 스레드들을 종료시키는지??
대답 -> 데몬 스레드는 강제 종료해도 별 문제없는 정도의 작업들만 맡긴다. 

***동기화

Monitor : 공유자원에 thread가 접근하는 것을 제어하기 위해 Monitor라는 것을 제공.

동기화문제(ex. 극장좌석 예약시스템)

